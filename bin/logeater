#!/usr/bin/env ruby

require "logeater"
require "optparse"

$force = false
OptionParser.new do |args|
  args.on("--force", "Imports all specified files, overwiting previous imports if necessary") do
    $force = true
  end
end.parse!

app = ARGV.shift
unless app
  puts "USAGE: logeater [--force] <app> <files...>"
  exit
end

files = ARGV
if files.empty?
  puts "USAGE: logeater [--force] <app> <files...>"
  exit
end

unless $force
  imported_files = Logeater::Request.where(app: app).pluck("DISTINCT logfile")
  files.reject! { |file| imported_files.member? File.basename(files[0]) }
end

started_all = Time.now
files.each_with_index do |file, i|
  reader = Logeater::Reader.new(app, file, progress: true)
  reader.remove_existing_entries!
  
  started_count = Logeater::Request.count
  started_at = Time.now
  reader.import
  finished_at = Time.now
  finished_count = Logeater::Request.count
  
  puts " > \e[34mImported \e[1m%d\e[0;34m requests in \e[1m%.2f\e[0;34m seconds (%d of %d)\e[0m\n\n" % [
    finished_count - started_count,
    finished_at - started_at,
    i + 1,
    files.length ]
end

finished_all = Time.now
seconds = finished_all - started_all
minutes = (seconds / 60).to_i
seconds -= (minutes * 60)
puts "Total time %d minutes, %.2f seconds" % [minutes, seconds]
